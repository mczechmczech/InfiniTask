# a basic gui interface for a worker SQLite db without extra windows for function

from tkinter import *
import tkinter as tk
import sqlite3
import json
from typing import List, Any

main_window = Tk()
login_window = Toplevel(main_window)
login_window.attributes("-topmost", True)
# create useful vars for log in window
gui_username = StringVar()
gui_password = StringVar()
global valid_login
valid_login = False
global user_role
user_role = 1
# create tkinter gui vars
gui_descr = StringVar()
gui_worker = StringVar()
gui_name = StringVar()
list_names_dropdown: List[StringVar]
gui_search = StringVar()
list_sort_dropdown = ["Job #", "Job Description", "Worker"]
gui_sort = StringVar()

scroll_bar = Scrollbar(main_window, orient=VERTICAL)
# create connection to DB
db_conn = sqlite3.connect('db file path')
cursor = db_conn.cursor()


# user clicks enter a new job button. open a new window with the fields required to make a new job entry
def on_click_new_job():
    new_job_window = Toplevel(main_window)
    Label(new_job_window, text="Enter a job description", justify=LEFT, anchor="w").grid(sticky=W, row=0, column=0,
                                                                                         columnspan=2)
    Entry(new_job_window, width=50, textvariable=gui_descr).grid(sticky=W, row=1, column=0, columnspan=2)

    # use a drop-down menu to choose a worker. retrieve names from Workers table from WorkerID from the Job table
    Label(new_job_window, text="Choose a worker for the job", justify=LEFT, anchor="w").grid(sticky=W, row=2, column=0)

    cursor.execute("SELECT Name FROM Worker")
    names_dropdown_result = cursor.fetchall()
    list_names_dropdown_new_job = list(names_dropdown_result)
    OptionMenu(new_job_window, gui_worker, *list_names_dropdown_new_job).grid(sticky=E, row=2, column=0, columnspan=2)
    Button(new_job_window, text="Enter Job", command=enter_new_job).grid(sticky='nesw', row=3,
                                                                         columnspan=2)


# user clicks enter a new worker button. open a new window with the field required to make a new worker
def on_click_new_worker():
    new_worker_window = Toplevel(main_window)
    Label(new_worker_window, text="Enter the new worker's name", justify=LEFT, anchor="w").grid(sticky=W, row=0,
                                                                                                column=0,
                                                                                                columnspan=2)
    Entry(new_worker_window, width=50, textvariable=gui_name).grid(sticky=W, row=1, column=0, columnspan=2)
    Button(new_worker_window, text="Enter New Worker", command=enter_new_worker).grid(sticky='nesw', row=3,
                                                                                      columnspan=2)


# enter a new job into the DB from the new job window
def enter_new_job():
    # get gui vars and store them. format them with capitalize() to help the sort function work better
    new_job_descr = gui_descr.get()
    new_job_descr = new_job_descr.capitalize()
    new_job_wrkr = format(gui_worker.get())
    new_job_wrkr_edit = "".join(x for x in new_job_wrkr if x.isalpha())

    # get the workerID of the selected worker name to add into Job table
    sql_query_1 = "SELECT WorkerID FROM Worker WHERE Name = (?);"
    data_1 = (new_job_wrkr_edit,)
    cursor.execute(sql_query_1, data_1)
    worker_result = cursor.fetchone()
    worker_id = worker_result[0]

    # add new job into Job table
    sql_query_2 = "INSERT INTO Job (Descr, WorkerID) VALUES (?, ?);"
    data_2 = (new_job_descr, worker_id,)
    cursor.execute(sql_query_2, data_2)
    db_conn.commit()
    on_click_refresh()
    gui_descr.set("")
    gui_worker.set("")


# enter a new worker into the DB from the new worker window
def enter_new_worker():
    # get gui vars and store them. format them with capitalize() to help the sort function work better
    new_worker_name = gui_name.get()
    new_worker_name = new_worker_name.capitalize()

    sql_query = "INSERT INTO Worker (Name) VALUES (?);"
    data = (new_worker_name,)
    cursor.execute(sql_query, data)
    db_conn.commit()
    gui_name.set("")


# user clicks the search button
def on_click_new_search():
    # get gui vars and query the DB for any entries that contain the search
    new_search = gui_search.get()
    sql_query = "SELECT * FROM Job WHERE Descr LIKE '%" + new_search + "%';"
    cursor.execute(sql_query)
    search_result = cursor.fetchall()

    # display the result of the search
    disp_jobs = tk.Text(main_window)
    disp_jobs.config(yscrollcommand=scroll_bar.set)
    scroll_bar.config(command=disp_jobs.yview)
    disp_jobs.grid(row=1, column=0)

    cursor.execute("SELECT * FROM Worker")
    worker_result = cursor.fetchall()

    for search_row in search_result:
        disp_jobs.insert('end', search_row[0])
        disp_jobs.insert('end', "\t")
        disp_jobs.insert('end', search_row[1])
        disp_jobs.insert('end', "\t\t\t\t\t\t\t")
        for worker_row in worker_result:
            if search_row[2] == worker_row[0]:
                disp_jobs.insert('end', worker_row[1])
                disp_jobs.insert('end', "\n")
    gui_search.set("")


# user clicks the sort button. if the user doesn't select a drop-down item, use jobID
def on_click_new_sort():
    # get gui vars
    new_sort = gui_sort.get()
    # change new_sort to be the name of the DB column based on the drop-down selection
    if new_sort == "Job #":
        new_sort = "JobID"
    elif new_sort == "Job Description":
        new_sort = "Descr"
    elif new_sort == "Worker":
        new_sort = "Name"
    elif new_sort == "":
        new_sort = "JobID"

    # query the DB, sort the results. search through worker table for worker name
    sql_query = ("SELECT JobID, Descr, Name from Job INNER JOIN Worker on Worker.WorkerID = Job.WorkerID ORDER BY "
                 + new_sort + " ASC;")
    cursor.execute(sql_query)
    sort_result = cursor.fetchall()
    # display the results
    disp_jobs = tk.Text(main_window)
    disp_jobs.config(yscrollcommand=scroll_bar.set)
    scroll_bar.config(command=disp_jobs.yview)
    disp_jobs.grid(row=1, column=0)

    for sort_row in sort_result:
        disp_jobs.insert('end', sort_row[0])
        disp_jobs.insert('end', "\t")
        disp_jobs.insert('end', sort_row[1])
        disp_jobs.insert('end', "\t\t\t\t\t\t\t")
        disp_jobs.insert('end', sort_row[2])
        disp_jobs.insert('end', "\n")


# user has clicked the login button
# sets valid_login True if log in is valid, False if log in is invalid. informs user
# that their log in was invalid
def on_click_login():
    global valid_login
    global user_role
    username = gui_username.get()
    password = gui_password.get()

    sql_query = "SELECT Password, Role FROM Login WHERE Username = \"" + username + "\";"
    cursor.execute(sql_query)
    query_result = cursor.fetchall()
    password_result = query_result[0][0]
    role_result = query_result[0][1]
    if query_result is not None:
        query_result_edit = "".join(x for x in password_result if x.isalpha())

        if query_result_edit == password:
            valid_login = True
            user_role = role_result
    else:
        valid_login = False
        invalid_login_window = Tk()
        invalid_login_window.attributes("-topmost", True)
        Label(invalid_login_window, text="Invalid Log In").pack()
        Button(invalid_login_window, text="OK", command=invalid_login_window.destroy).pack()
        invalid_login_window.mainloop()
    main()


# user hits the refresh button, restore the page to the "home" page
def on_click_refresh():
    disp_jobs = tk.Text(main_window)
    disp_jobs.config(yscrollcommand=scroll_bar.set)
    scroll_bar.config(command=disp_jobs.yview)
    disp_jobs.grid(row=1, column=0)

    cursor.execute("SELECT * FROM Job")
    jobs_result = cursor.fetchall()

    cursor.execute("SELECT * FROM Worker")
    worker_result = cursor.fetchall()

    for job_row in jobs_result:
        disp_jobs.insert('end', job_row[0])
        disp_jobs.insert('end', "\t")
        disp_jobs.insert('end', job_row[1])
        disp_jobs.insert('end', "\t\t\t\t\t\t\t")
        for worker_row in worker_result:
            if job_row[2] == worker_row[0]:
                disp_jobs.insert('end', worker_row[1])
                disp_jobs.insert('end', "\n")


def main():
    # create a scroll bar
    scroll_bar.grid(row=1, column=1, sticky=NS)

    # create a log in window
    Label(login_window, text="InfiniTask Log In", justify=LEFT, anchor="w", font="bold", fg="blue").grid(sticky=W,
                                                                                                         row=0,
                                                                                                         column=0,
                                                                                                         columnspan=1)
    Label(login_window, text="User Name").grid(sticky=W, row=2, column=0,
                                               columnspan=1)
    Entry(login_window, width=75, textvariable=gui_username).grid(row=2, column=1, columnspan=2)
    Label(login_window, text="Password").grid(sticky=W, row=3, column=0,
                                              columnspan=1)
    Entry(login_window, width=75, textvariable=gui_password, show="*").grid(row=3, column=1, columnspan=2)
    Button(login_window, text="Log In", command=on_click_login, anchor="center").grid(row=4, column=0,
                                                                                      columnspan=2)
    # user logged in with a valid password and username. display the rest of the application
    if valid_login:
        login_window.destroy()
        Label(main_window, text="InfiniTask", justify=LEFT, anchor="w", font="bold", fg="blue").grid(sticky=W, row=0,
                                                                                                     column=0,
                                                                                                     columnspan=1)
        # display functionality widgets at bottom of page
        if user_role == 0:
            Button(main_window, text="Enter New Job", command=on_click_new_job, anchor=W).grid(sticky=W, row=2,
                                                                                               columnspan=2,
                                                                                               column=0)
            Button(main_window, text="Enter New Worker", command=on_click_new_worker, anchor=W).grid(sticky=W, row=3,
                                                                                                     column=0,
                                                                                                     columnspan=2)
        Button(main_window, text="Search", command=on_click_new_search, anchor=W).grid(sticky=N, row=2,
                                                                                       column=0, columnspan=2)
        Button(main_window, text="Sort By", command=on_click_new_sort, anchor=W).grid(sticky=N, row=3,
                                                                                      column=0,
                                                                                      columnspan=2)
        Entry(main_window, width=50, textvariable=gui_search).grid(sticky=E, row=2, column=0, columnspan=2)
        OptionMenu(main_window, gui_sort, *list_sort_dropdown).grid(sticky=E, row=3, column=0, columnspan=2)
        # button to refresh page
        Button(main_window, text="Refresh", command=on_click_refresh, justify=RIGHT, anchor="e").grid(row=0, column=0,
                                                                                                      columnspan=2)
        on_click_refresh()
        main_window.mainloop()
    else:
        login_window.mainloop()


main()
